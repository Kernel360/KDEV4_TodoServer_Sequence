WEB이란?
- ( World Wide Web, WWW, W3 ) 은 인터넷에 연결된 컴퓨터를 통해 사람들이 정보를 공유할 수 있는 전 세계적인 정보 공간을 말한다.
- WEB 의 용도는 다양하게 나눌 수 있다.
- 그 중에서 우리가 제일 많이 접하는 부분 -> 1. Web Site ( google, naver, daum, yahoo etc... )
                                   -> 2. User Interface ( Chrome, Safari, Explorer, Smart Watch, IPTV 등등 )
                                         Web Site 처럼 이러한 정보들을 보기 위해서 우리에게 사용자 인터페이스를 제공하기도 한다.
                                   -> 3. API ( Application Programming Interface ) Web Service ( Kakao Open API ... )
                                         웹 서비스를 제공하기 위해서 우리는 API 같은 것들을 개발해야 함
                                         여러 가지 웹 서비스를 제공하는 회사에서는 자신들의 서비스를 외부에서 사용할 수 있도록
                                         여러 가지 오픈 API 를 제공한다.

WEB 구성 요소
- HTTP ( Hypertext Transfer Protocol )
  -> 어플리케이션을 컨트롤 하는 프로토콜( 서로 통신을 하기 위한 약속) 이다.
  -> 내가 어떠한 형태로 너한테 요청을 할 거야 라는 것이다.
  -> 너는 그러면 나는 이렇게 약속을 했으니 너는 이렇게 해석을 하면 돼 라고 해서
  -> 프로토콜 이라는 것은 우리가 데이터를 주고 받을 때 서로 약속한 형태를 프로토콜이라고 보면 됨
  -> GET, POST, PUT, DELETE, OPTIONS, HEAD, TRACE, CONNECT 의 METHOD 가 존재 함

- URI ( Uniform Resource Identifier )
  -> 리소스 식별자
  -> 특정 사이트를 들어간다든지 또는 특정 쇼핑 목록을 불러온다든지 또는 특정 동영상 목록이라든지
     웹 상에 있는 모든 정보에 접근할 수 있는 주소이다.
  -> 한 가지 리소스가 있다고 하면 이 곳에 접근할 수 있는 주소는 여러 가지가 존재할 수 있지만
     한 개의 주소가 여러 개의 리소스를 접근할 수는 없다.
  -> "반드시 특정 리소스에 대해서는 유니크한 주소만 존재하게 된다."

- HTML ( Hyper Text Markup Language )
  -> 하이퍼미디어 포맷
  -> XML 을 바탕으로 한 범용 문서 포맷 이다.
  -> 서버에 특정 리소스를 요청하게 되면 HTML 로 구성된 문자열 형태가 내려오게 된다.
  -> Chrome, Safari, Explorer 에서 분석을 해서 사용자가 알아보기 쉬운 형태로 표현을 해준다
  -> 그렇기 때문에 JSON 이라든지 HTML 이라든지 여러 가지 포맷이 있는데 웹 브라우저 같은 경우는 Hyper 미디어 포맷으로 우리에게 보여준다.


HTTP
- HTTP ( Hyper Text Transfer Protocol ) 로 RFC 2616 에서 규정된 Web 에서 데이터를 주고 받는 프로토콜 ( 약속 ).
  웹에서 우리가 데이터를 주고 받을 때 반드시 어떠한 형태로 보내겠다 라는 서로의 약속이 있어야 된다. 그게 바로 HTTP 라는 프로토콜의 형태로
  우리는 데이터를 주고 받겠다 라고 여기에 규정이 되어 있다

- 이름에는 하이퍼텍스트 전송용 프로토콜로 정의되어 있지만 실제로 HTML, XML, JSON, Image, Voice, Video, Javascript, PDF 등
  다양한 컴퓨터에서 다룰 수 있는 것은 모두 전송 할 수 있다.

- HTTP 는 TCP 를 기반으로 한 REST 의 특징을 모두 구현하고 있는 WEB 기반의 프로토콜 이다.
- 나는 특정 이러한 문자들을 보낼 때 이거를 보내주는 역할을 할 때 보내는 프로토콜이 HTTP 이다 라고 생각하면 됨

- 1. 사용자 측( 데이터를 요청하는 쪽 )에서 어떠한 데이터를 받고 싶다 라는 요청 메시지를 작성
     이때는 간단하게 주소 형태일 수도 있고 또는 메시지 바디를 채워서 어떠한 내용을 받고 싶다라고 작성을 할 수도 있음
- 2. 그렇게 작성을 한 후에 요청 메시지로 전송을 한다. 즉 서버에 HTTP 통신을 통해서 특정 데이터를 요청을 한다.
     이때 이제 필요한 것이 어디로 요청을 하겠다 라는 URI 가 필요하다.
- 3. 이렇게 요청을 하게 되면 서버에서는 항상 리슨, 요청을 대기하고 있다가
- 4. 이러한 데이터가 들어오게 되면 요청 메시지를 수신 한다.
- 5. 그리고 그 메시지를 어떤 내용을 보냈는지 해석을 하게 된다.
- 6. 그리고 거기에 따라서 어떠한 애플리케이션을 통해가지고 ( 애플리케이션 할당 )
- 7. 이러한 것들을 애플리케이션 로직을 통해서 처리를 한다.
- 8. 그리고 응답 메시지를 전송해주는데 이때 이제 HTML( XML 태그 기반으로 만들어진 문자열 )이라는 포맷의 데이터를 보내주거나
     또는 우리가 앞으로 서버 개발에서 많이 사용하게 되는 JSON( JSON 형태로 만들어진 문자열 ) 형태의 데이터들을 보내주게 된다.
- 9. 그러면 클라이언트에서는 이러한 메시지들을 수신을 한 다음
- 10. 어떠한 형태인지 응답 메시지 해석을 한다.
- 11. 그리고 나서 브라우저를 통해서 데이터를 표시 및 처리한다거나 또는 요청한 것이 또 다른 API 서버였다면 적절하게 데이터를 가공해서
      데이터베이스에 저장을 한다든지 사용자한테 전달을 해주는 형태이다.


- 멱득성은 서버에 여러 번 요청을 해도 항상 결과가 같다면 멱등하다고 본다.
- 안정성이라는 부분은 특정한 리소스 즉 특정한 데이터에 요청을 했을 때 이 데이터에 대한 변화가 없어야 된다.
- 이러한 것들을 사용할 때 URI 의 어떤 값을 가질 수 있느냐고 봤을 때 GET 은 Path Variable 즉 URI 주소에 대해서
  Path Variable( 주소에 들어가는 부분 )어떠한 값을 가질 수 있고 QueryParameter 를 통해서 조작을 할 수 있다.
  ( 뒤에 물음표를 통하고 뒤에 붙는 것을 QueryParameter 라고 부른다. ex) / /?name="",age=""
  그리고 requestBody 에 데이터를 담을 수 있느냐 했을 때 get 방식은 못 담음...
  근데 POST 방식은 http 데이터 바디에 어떠한 리소스를 생성할 것인지 넣기 때문에 데이터 바디를 가지고 있다
  --


- POST 는 멱등하지 않는데 PUT 은 왜 멱등하냐는 질문을 가질 수 있다
  그 이유는 PUT 은 리소스가 없으면 생성을 하고 그 다음에 요청을 했을 때는 갱신이 된다.
  그렇기 때문에 항상 원격에 있는 서버의 리소스는 동일한 형태를 가지게 된다 ( 없으면 생성을 하고 있으면 갱신을 하기 때매 멱등하다고 봄 )
- POST 나 PUT 둘 다 QueryParameter 는 검색을 할 때 사용하기 때문에 사용하지 않는 것을 추천드린다.


HTTP Status 코드
- HTTP Status 코드는 클라이언트가 서버에 요청을 했을 때 응답에 대한 코드이다.

- 1xx -> 처리중
      -> 처리가 계속 되고 있는 상태. 클라이언트는 요청을 계속 하거나 서버의 지시에 따라서 재요청

- 2xx -> 성공
      -> 요청의 성공
      -> PUT 메서드 같은 경우 200번이 내려왔다는 것은 데이터가 수정이 되었다는 뜻이고
      -> 201번이 내려왔다는 것은 데이터가 생성이 되었다 라는 뜻입니다.

- 3xx -> 리다이렉트
      -> 다른 리소스로 리다이렉트. 해당 코드를 받았을 때는 Response 의 새로운 주소로 다시 요청

- 4xx -> 클라이언트 에러
      -> 클라이언트의 요청에 에러가 있는 상태. 재전송 하여도 에러가 해결되지 않는다.

- 5xx -> 서버 에러
      -> 서버 처리중 에러가 발생한 상태. 재전송시 에러가 해결 되었을 수도 있다.