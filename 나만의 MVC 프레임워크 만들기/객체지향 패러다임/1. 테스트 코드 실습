자바 단위 테스팅 프레임워크 - JUnit5 사용

AssertJ
- 테스트 코드 가독성을 높여주는 자바 라이브러리

테스트 코드를 작성하는 이유?
- 문서화 역할
- 코드에 결함을 발견하기 위함
- 리팩토링 시 안정성 확보
- 테스트 하기 쉬운 코드를 작성하다 보면 더 낮은 결합도를 가진 설계를 얻을 수 있음

TDD
- Test Driven Development(테스트 주도 개발)
- 프로덕션 코드보다 테스트 코드를 먼저 작성하는 개발 방법
- TFD(Test First Development) + 리팩토링
- 기능 동작을 검증(메서드 단위)

BDD
- Behavior Driven Development (행위 주도 개발)
- 시나리오 기반으로 테스트 코드를 작성하는 개발 방법
- 하나의 시나리오는 Given, When, Then 구조를 가짐

- 보통 TDD 와 BDD 혼용해서 많이 사용

비밀번호 유효성 검증기 실습 요구사항
- 비밀번호는 최소 8자 이상 12자 이하여야 한다.
- 비밀번호가 8자 미만 또는 12자 초과인 경우 illegalArgumentException 예외를 발생시킨다
- 경계조건에 대해 테스트 코드를 작성해야 한다
  -> 경계 조건에서 테스트를 하지 않으면 항상 거기에서 문제가 많이 발생됨
  -> 그래서 테스트 코드를 작성할 때는 경계 조건에 대한 테스트 코드를 반드시 작성하기 장려 드림

- 기존에는 내부에서 RandomPasswordGenerator 를 생성해서 초기화를 할지 말지를 결정해줬다
- 이렇게 내부에서 RandomPasswordGenerator 를 의존하다 보니 강한 결합이 생겼고 테스트 코드를 작성할 때 테스트 하기 쉽지 않은 구조였다.
- 테스트 하기 쉬운 코드로 작성하기 위해서 상위 인터페이스를 하나 선호해줬고 User 에서는 해당 인터페이스를 의존하도록 구현했음
- 테스트 하기 쉬운 코드를 작성하다 보니 RandomPasswordGenerator 대한 의존성을 제거할 수 있었다. 즉, 강한 결합을 제거할 수 있었다